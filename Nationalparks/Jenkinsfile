// Jenkinsfile for NationalParks
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-slave-appdev",
      resourceRequestMemory: "2Gi",
      resourceLimitMemory: "3Gi"
    )
  ]
) {
  node('skopeo-pod') {
    echo "GUID: ${GUID}"
    echo "CLUSTER: ${CLUSTER}"

    // Your Pipeline Code goes here. Make sure to use the ${GUID} and ${CLUSTER} parameters where appropriate
    // You need to build the application in directory `Nationalparks`.
    // Also copy "../nexus_settings.xml" to your build directory
    // and replace 'GUID' in the file with your ${GUID} to point to >your< Nexus instance

    def name="nationalparks"
    def projectFolder="./Nationalparks"
    def targetFile="${name}.jar"

    stage("BUILD PROJECT"){
      echo ">>> CHECKOUT PROJECT"
      checkout scm
      echo ">>> START BUILD"
      sh "mvn -s nexus_settings.xml -f ${projectFolder} clean install -DskipTests=true"
      echo "<<< BUILD DONE"
    }

    stage("UNIT TESTS"){
      echo ">>> START UNIT TESTS"
      sh "mvn -s nexus_settings.xml -f ${projectFolder} test"
      echo "<<< UNIT TESTS DONE"
    }

    stage("INTEGRATION TESTS"){
      echo ">>> START INTEGRATION TESTS"
      echo "<<< INTEGRATION TESTS DONE"
    }

    stage('SONARQUBE CODE CHECKS') {
      echo ">>> START CODE ANALISYS"
      sh "mvn -s nexus_settings.xml -f ${projectFolder} sonar:sonar -Dsonar.host.url=http://sonarqube-${GUID}-sonarqube.apps.${CLUSTER}"
      echo "<<< CODE ANALISYS DONE"
    }

    stage('PUSH TO NEXUS') {
      echo ">>> PUSH TO NEXUS"
      sh "mvn -s nexus_settings.xml -f ${projectFolder} deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3-${GUID}-nexus.apps.${CLUSTER}/repository/releases"
      echo "<<< PUSH TO NEXUS DONE"
    }

    def jarPath="${projectFolder}/target/${targetFile}"
    def pomPath="${projectFolder}/pom.xml"

    def version    = getVersionFromPom(pomPath)
    def artifactId = getArtifactIdFromPom(pomPath)
    def groupId    = getGroupIdFromPom(pomPath)

    def devTag  = "${version}-${BUILD_NUMBER}"
    def prodTag = "${version}"

    stage("DEPLOY TO DEV"){
      echo ">>> DEV START DEPLOY"

      echo ">>> DEV START BUILD"
      sh "oc start-build ${name} --from-file=${jarPath} -F -n ${GUID}-parks-dev"

      echo ">>> DEV TAGGING"
      sh "oc tag ${GUID}-parks-dev/${name}:latest ${GUID}-parks-dev/${name}:${devTag} -n ${GUID}-parks-dev"

      echo ">>> DEV SET IMAGE"
      sh "oc set image dc/${name} ${name}=${name}:${devTag} --source=istag -n ${GUID}-parks-dev"

      echo ">>> DEV ROLLOUT LATEST"
      sh "oc rollout latest ${name} -n ${GUID}-parks-dev"
      echo "<<< DEV DEPLOY DONE"
    }

    stage("POST DEV DEPLOYMENT"){
      echo ">>> DEV DEPLOYMENT FINISHED CHECK"
      sh " ./Infrastructure/bin/podLivenessCheck.sh ${name} ${GUID}-parks-dev"
      echo "<<< DEV DEPLOYMENT DONE"

      echo ">>> IMG CP TO NEXUS REGISTRY"
      def token=readFile ('/var/run/secrets/kubernetes.io/serviceaccount/token')
      sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=default:${token} --dest-creds=admin:admin123 docker://docker-registry.default.svc:5000/${GUID}-parks-dev/${name}:${devTag} docker://nexus-docker.${GUID}-nexus.svc:5000/${GUID}-parks/dev/${name}:${devTag}"
      echo "<<< IMG CP DONE"
    }

    def currentTarget
    def newTarget
    stage("DEPLOY TO PROD"){
      def isCurrentGreen
      echo ">>> CHECK FOR TARGETS"
      currentTarget = sh returnStdout: true, script:"oc get svc/${name} -n ${GUID}-parks-prod --template=\"{{.spec.selector.deploymentconfig}}\""
      echo "<<< CURRENT TARGET DETECTED ${currentTarget}"

      isCurrentGreen=currentTarget.contains("blue")
      newTarget= isCurrentGreen?"${name}-green":"${name}-blue"
      echo "<<< CURRENT COULOR DETECTED ${newTarget}"

      echo ">>> DEPLOY TO TARGET: ${newTarget}"
      sh "oc tag ${GUID}-parks-dev/${name}:${devTag} ${GUID}-parks-prod/${name}:${prodTag} -n ${GUID}-parks-prod"
      sh "oc set image dc/${newTarget} ${name}=${name}:${prodTag} --source=istag -n ${GUID}-parks-prod"
      sh "oc rollout latest ${newTarget} -n ${GUID}-parks-prod"
      echo "<<< DEPLOY DONE ON TARGET: ${newTarget}"
    }

    stage("CHECK FOR B/G"){
      echo ">>> CHECK FOR POD LIVENESS"
      sh " ./Infrastructure/bin/podLivenessCheck.sh ${name} ${GUID}-parks-dev"
      sh " ./Infrastructure/bin/podLivenessCheck.sh ${newTarget} ${GUID}-parks-prod"
      echo "<<< ${newTarget} IS ALIVE"
    }

    stage("DO B/G"){
      echo ">>> EXECUTE B/G"
      sh "oc patch svc/${name} -n ${GUID}-parks-prod -p '{\"spec\":{\"selector\":{\"deploymentconfig\":\"${newTarget}\"}}}' "
      echo "<<< B/G SWAP DONE"
    }


  }
}

// Convenience Functions to read variables from the pom.xml
// Do not change anything below this line.
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
